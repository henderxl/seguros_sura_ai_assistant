"""
Agente de Expedici√≥n - Especializado en la emisi√≥n de p√≥lizas.
Maneja recolecci√≥n de datos del cliente y expedici√≥n usando la API existente.
"""

import re
from typing import Dict, Any, List, Optional

from agents.base_agent import BaseAgent, AgentState, AgentCapabilities
from services.expedition_service import expedition_service
from utils.config import config

class ExpeditionAgent(BaseAgent):
    """Agente especializado en expedici√≥n de p√≥lizas"""
    
    def __init__(self):
        super().__init__("expedition")
        self.expedition_service = expedition_service
        
        # Palabras clave que indican solicitudes de expedici√≥n
        self.expedition_keywords = [
            "comprar", "adquirir", "expedir", "emitir", "contratar",
            "quiero la p√≥liza", "proceder", "acepto", "confirmo",
            "datos personales", "c√©dula", "tel√©fono"
        ]
        
        # Estados del proceso de expedici√≥n
        self.STATES = {
            "NEEDS_QUOTATION": "needs_quotation",  # Nuevo estado
            "REQUESTING_CLIENT_DATA": "requesting_client_data",
            "VALIDATING_DATA": "validating_data",
            "CONFIRMING_PURCHASE": "confirming_purchase",
            "PROCESSING_EXPEDITION": "processing_expedition",
            "EXPEDITION_COMPLETED": "expedition_completed"
        }
        
        # Campos requeridos del cliente
        self.REQUIRED_FIELDS = [
            "identificacion_tomador",
            "celular_tomador", 
            "email_tomador"
        ]
    
    def can_handle(self, user_input: str, context: Dict[str, Any]) -> bool:
        """
        Determina si puede manejar solicitudes de expedici√≥n
        
        Args:
            user_input: Entrada del usuario
            context: Contexto de la conversaci√≥n
            
        Returns:
            True si es una solicitud de expedici√≥n
        """
        user_input_lower = user_input.lower()
        
        # Verificar palabras clave de expedici√≥n
        has_expedition_keywords = any(
            keyword in user_input_lower 
            for keyword in self.expedition_keywords
        )
        
        # Verificar si fue transferido desde cotizaci√≥n
        is_transfer_from_quotation = context.get("transfer_to") == "expedition"
        
        # Verificar si ya est√° en proceso de expedici√≥n
        is_in_expedition_process = context.get("expedition_state") in self.STATES.values()
        
        # Verificar si hay cotizaci√≥n lista para expedir
        has_quotation = bool(context.get("current_quotation"))
        
        return has_expedition_keywords or is_transfer_from_quotation or is_in_expedition_process
    
    async def process(self, state: AgentState) -> AgentState:
        """
        Procesa solicitudes de expedici√≥n
        
        Args:
            state: Estado actual del agente
            
        Returns:
            Estado actualizado con respuesta
        """
        try:
            # Obtener estado espec√≠fico de expedici√≥n
            expedition_state = state.context_data.get("expedition_state", "")
            
            self.logger.info("Procesando expedici√≥n", 
                           expedition_state=expedition_state)
            
            # Verificar que hay cotizaci√≥n disponible
            current_quotation = state.context_data.get("current_quotation")
            expedition_ready = state.context_data.get("expedition_ready", False)
            
            # MANEJAR ESTADO NEEDS_QUOTATION
            if expedition_state == self.STATES["NEEDS_QUOTATION"]:
                # ANTI-BUCLE: Verificar intentos previos
                transfer_attempts = state.context_data.get("transfer_attempts", 0)
                if transfer_attempts >= 3:
                    self.logger.error("üö´ M√°ximo de transferencias alcanzado, escalando a humano")
                    state.needs_human_intervention = True
                    state.escalation_reason = "No se pudo recuperar cotizaci√≥n despu√©s de m√∫ltiples intentos"
                    return state
                
                # Esperando que regresen de quotation con cotizaci√≥n
                if current_quotation:
                    # Ya hay cotizaci√≥n en memoria, proceder
                    return await self._start_expedition_process(state)
                elif expedition_ready:
                    # Recuperar cotizaci√≥n de BD primero
                    self.logger.info(f"üîç expedition_ready=True, recuperando cotizaci√≥n de BD para session_id: {state.session_id}")
                    
                    try:
                        with self.db_manager.get_connection() as conn:
                            count_row = conn.execute("""
                                SELECT COUNT(*) as count FROM quotations WHERE session_id = ?
                            """, (state.session_id,)).fetchone()
                            self.logger.info(f"üîç Cotizaciones encontradas: {count_row['count'] if count_row else 0}")
                            
                            row = conn.execute("""
                                SELECT vehicle_data, quotation_result 
                                FROM quotations 
                                WHERE session_id = ? 
                                ORDER BY created_at DESC 
                                LIMIT 1
                            """, (state.session_id,)).fetchone()
                            
                            if row:
                                import json
                                vehicle_data = json.loads(row['vehicle_data'])
                                quotation_result = json.loads(row['quotation_result'])
                                
                                current_quotation = {
                                    "quotations": quotation_result.get("quotations", {}),
                                    "vehicle_details": vehicle_data
                                }
                                state.context_data["current_quotation"] = current_quotation
                                state.context_data.pop("expedition_ready", None)
                                self.logger.info("‚úÖ Cotizaci√≥n recuperada de BD para expedici√≥n")
                                
                                # Ahora proceder con expedici√≥n
                                return await self._start_expedition_process(state)
                            else:
                                raise Exception("No se encontr√≥ cotizaci√≥n en BD")
                                
                    except Exception as e:
                        self.logger.warning(f"No se pudo recuperar cotizaci√≥n: {e}")
                        # Incrementar contador de intentos
                        state.context_data["transfer_attempts"] = transfer_attempts + 1
                        return await self._no_quotation_available(state)
                else:
                    # Incrementar contador de intentos
                    state.context_data["transfer_attempts"] = transfer_attempts + 1
                    # A√∫n no hay cotizaci√≥n, re-transferir
                    return await self._no_quotation_available(state)
            
            # Cualquier otro caso - proceder normalmente
            
            # Procesar seg√∫n el estado actual
            if not expedition_state or expedition_state == "":
                # Iniciar proceso de expedici√≥n
                return await self._start_expedition_process(state)
            
            elif expedition_state == self.STATES["REQUESTING_CLIENT_DATA"]:
                # Procesar datos del cliente proporcionados
                return await self._process_client_data(state)
            
            elif expedition_state == self.STATES["CONFIRMING_PURCHASE"]:
                # Procesar confirmaci√≥n de compra
                return await self._process_purchase_confirmation(state)
            
            elif expedition_state == self.STATES["EXPEDITION_COMPLETED"]:
                # Manejar interacciones post-expedici√≥n
                return await self._handle_post_expedition(state)
            
            else:
                # Estado desconocido, reiniciar proceso
                return await self._start_expedition_process(state)
        
        except Exception as e:
            self.log_error(e, state, {
                "expedition_state": expedition_state,
                "has_quotation": bool(current_quotation)
            })
            
            error_response = (
                "Disculpa, tuve un problema procesando tu solicitud de expedici√≥n. "
                "Por favor intenta nuevamente o te conecto con un asesor humano."
            )
            
            state = self.update_state(state, agent_response=error_response)
            state = self.add_message_to_history(state, "assistant", error_response)
            
            # Marcar para escalamiento en caso de error
            state.needs_human_intervention = True
            state.escalation_reason = "Error t√©cnico en proceso de expedici√≥n"
            
            return state
    
    async def _start_expedition_process(self, state: AgentState) -> AgentState:
        """Inicia el proceso de expedici√≥n"""
        current_quotation = state.context_data.get("current_quotation")
        
        # VALIDACI√ìN CR√çTICA: Verificar que current_quotation existe
        if not current_quotation or not current_quotation.get("quotations"):
            self.logger.error("‚ùå No se encontr√≥ cotizaci√≥n v√°lida para iniciar expedici√≥n")
            return await self._no_quotation_available(state)
        
        plans = list(current_quotation["quotations"].keys())
        
        # Si hay m√∫ltiples planes, solicitar selecci√≥n
        if len(plans) > 1:
            response = self._request_plan_selection(current_quotation)
            # Cambiar estado para procesar selecci√≥n de plan
            state.context_data["expedition_state"] = self.STATES["REQUESTING_CLIENT_DATA"]
            
            # Persistir estado de selecci√≥n de plan
            self.save_agent_state(state, {
                "expedition_state": self.STATES["REQUESTING_CLIENT_DATA"],
                "awaiting_plan_selection": True,
                "quotation_available": True
            })
        else:
            # Un solo plan, proceder con datos del cliente
            selected_plan = plans[0]
            state.context_data["selected_plan"] = selected_plan
            response = self._request_client_data(selected_plan, current_quotation)
            state.context_data["expedition_state"] = self.STATES["REQUESTING_CLIENT_DATA"]
            
            # Persistir estado solo cuando hay plan seleccionado
            self.save_agent_state(state, {
                "expedition_state": self.STATES["REQUESTING_CLIENT_DATA"],
                "selected_plan": selected_plan,
                "quotation_available": True
            })
        
        state = self.update_state(state, agent_response=response["content"])
        state = self.add_message_to_history(
            state, "assistant", response["content"],
            metadata=response.get("metadata", {})
        )
        
        return state
    
    async def _process_client_data(self, state: AgentState) -> AgentState:
        """Procesa datos del cliente proporcionados"""
        user_input = state.last_user_input
        
        # Verificar si el usuario est√° seleccionando plan primero
        selected_plan = state.context_data.get("selected_plan")
        self.logger.info(f"üîç _process_client_data: selected_plan={selected_plan}, user_input='{user_input}'")
        
        if not selected_plan:
            current_quotation = state.context_data.get("current_quotation", {})
            self.logger.info(f"üîç current_quotation disponible: {bool(current_quotation)}")
            self.logger.info(f"üîç quotations en current_quotation: {list(current_quotation.get('quotations', {}).keys())}")
            
            # SI NO HAY COTIZACI√ìN EN CONTEXT, RECUPERAR DE BD
            if not current_quotation or not current_quotation.get("quotations"):
                self.logger.info("üîç Recuperando cotizaci√≥n desde BD...")
                try:
                    with self.db_manager.get_connection() as conn:
                        row = conn.execute("""
                            SELECT vehicle_data, quotation_result 
                            FROM quotations 
                            WHERE session_id = ? 
                            ORDER BY created_at DESC 
                            LIMIT 1
                        """, (state.session_id,)).fetchone()
                        
                        if row:
                            import json
                            vehicle_data = json.loads(row['vehicle_data'])
                            quotation_result = json.loads(row['quotation_result'])
                            
                            current_quotation = {
                                "quotations": quotation_result.get("quotations", {}),
                                "vehicle_details": vehicle_data
                            }
                            state.context_data["current_quotation"] = current_quotation
                            self.logger.info(f"‚úÖ Cotizaci√≥n recuperada: {list(current_quotation['quotations'].keys())}")
                        else:
                            self.logger.error("‚ùå No se encontr√≥ cotizaci√≥n en BD")
                except Exception as e:
                    self.logger.error(f"‚ùå Error recuperando cotizaci√≥n: {e}")
            
            plan_selection = self._parse_plan_selection(user_input, current_quotation)
            self.logger.info(f"üîç Plan selection result: {plan_selection}")
            if plan_selection:
                state.context_data["selected_plan"] = plan_selection
                response = self._request_client_data(plan_selection, current_quotation)
                state.context_data["expedition_state"] = self.STATES["REQUESTING_CLIENT_DATA"]
                
                # Persistir estado cuando se selecciona plan
                self.save_agent_state(state, {
                    "expedition_state": self.STATES["REQUESTING_CLIENT_DATA"],
                    "selected_plan": plan_selection,
                    "quotation_available": True
                })
                
                state = self.update_state(state, agent_response=response["content"])
                state = self.add_message_to_history(state, "assistant", response["content"])
                return state
        
        # Parsear datos del cliente y combinar con datos parciales
        client_data = self._parse_client_data(user_input)
        
        # ACUMULACI√ìN CR√çTICA: Combinar con datos parciales existentes
        partial_data = state.context_data.get("partial_client_data", {})
        combined_data = partial_data.copy()
        combined_data.update(client_data)
        client_data = combined_data
        
        # GUARDAR PROGRESO SIEMPRE
        state.context_data["partial_client_data"] = client_data
        self.logger.info(f"üîç Datos acumulados: {client_data}")
        
        # Validar y solicitar datos faltantes progresivamente
        required_fields = ["identificacion_tomador", "celular_tomador", "email_tomador"]
        
        # Verificar qu√© datos faltan
        missing_fields = []
        for field in required_fields:
            if field not in client_data or not client_data[field]:
                missing_fields.append(field)
        
        if missing_fields:
            # PEDIR TODOS LOS DATOS FALTANTES EN UN SOLO MENSAJE
            response = self._request_comprehensive_data(missing_fields, client_data)
            state = self.update_state(state, agent_response=response["content"])
            state = self.add_message_to_history(state, "assistant", response["content"])
            
            # Guardar datos parciales
            state.context_data["partial_client_data"] = client_data
            self.logger.info(f"üìù Guardando datos parciales: {client_data}")
            
            return state
        
        # Todos los datos est√°n completos, validar formatos
        validation_errors = self.expedition_service.validate_client_data(client_data)
        
        if validation_errors:
            # Solicitar correcci√≥n de datos
            response = self._request_data_correction(validation_errors, client_data)
            state = self.update_state(state, agent_response=response["content"])
            state = self.add_message_to_history(state, "assistant", response["content"])
            return state
        
        # VERIFICAR QUE TENEMOS PLAN SELECCIONADO
        selected_plan = state.context_data.get("selected_plan")
        if not selected_plan:
            self.logger.error("‚ùå No hay plan seleccionado para confirmaci√≥n")
            # Escalar a humano
            state.needs_human_intervention = True
            state.escalation_reason = "Error t√©cnico: plan no seleccionado"
            return state
        
        # ASEGURAR QUE COTIZACI√ìN EST√â DISPONIBLE ANTES DE CONFIRMACI√ìN
        current_quotation = state.context_data.get("current_quotation")
        if not current_quotation:
            # Recuperar cotizaci√≥n de BD si no est√° en contexto
            try:
                with self.db_manager.get_connection() as conn:
                    row = conn.execute("""
                        SELECT vehicle_data, quotation_result 
                        FROM quotations 
                        WHERE session_id = ? 
                        ORDER BY created_at DESC 
                        LIMIT 1
                    """, (state.session_id,)).fetchone()
                    
                    if row:
                        import json
                        vehicle_data = json.loads(row['vehicle_data'])
                        quotation_result = json.loads(row['quotation_result'])
                        
                        current_quotation = {
                            "quotations": quotation_result.get("quotations", {}),
                            "vehicle_details": vehicle_data
                        }
                        state.context_data["current_quotation"] = current_quotation
                        self.logger.info("‚úÖ Cotizaci√≥n recuperada para confirmaci√≥n")
                    else:
                        self.logger.error("‚ùå No se encontr√≥ cotizaci√≥n para confirmaci√≥n")
                        state.needs_human_intervention = True
                        state.escalation_reason = "No se encontr√≥ cotizaci√≥n para confirmaci√≥n"
                        return state
            except Exception as e:
                self.logger.error(f"‚ùå Error recuperando cotizaci√≥n para confirmaci√≥n: {e}")
                state.needs_human_intervention = True
                state.escalation_reason = "Error t√©cnico recuperando cotizaci√≥n"
                return state
        
        # Datos v√°lidos, solicitar confirmaci√≥n
        state.context_data["client_data"] = client_data
        response = self._request_purchase_confirmation(client_data, state.context_data)
        state.context_data["expedition_state"] = self.STATES["CONFIRMING_PURCHASE"]
        
        # PERSISTIR DATOS DEL CLIENTE EN BD
        self.save_agent_state(state, {
            "expedition_state": self.STATES["CONFIRMING_PURCHASE"],
            "client_data": client_data,
            "selected_plan": state.context_data.get("selected_plan"),
            "quotation_available": True
        })
        
        state = self.update_state(state, agent_response=response["content"])
        state = self.add_message_to_history(state, "assistant", response["content"])
        
        return state
    
    async def _process_purchase_confirmation(self, state: AgentState) -> AgentState:
        """Procesa confirmaci√≥n de compra"""
        user_input_lower = state.last_user_input.lower()
        
        # Verificar confirmaci√≥n (M√ÅS FLEXIBLE)
        confirmation_words = ["s√≠", "si", "confirmo", "acepto", "correcto", "proceder", "continuar", "ok", "vale"]
        cancellation_words = ["no", "cancelar", "cambiar", "modificar", "negar"]
        
        # Tambi√©n aceptar respuestas num√©ricas o cortas como confirmaci√≥n
        if user_input_lower.strip() in ["1", "si", "s", "y", "yes", "ok"]:
            return await self._execute_expedition(state)
        
        if any(word in user_input_lower for word in confirmation_words):
            # Proceder con expedici√≥n
            return await self._execute_expedition(state)
        
        elif any(word in user_input_lower for word in cancellation_words):
            # Cancelar o modificar
            response = (
                "Entiendo que quieres hacer cambios. ¬øQu√© te gustar√≠a modificar?\n"
                "‚Ä¢ Datos personales\n"
                "‚Ä¢ Plan seleccionado\n"
                "‚Ä¢ Cancelar completamente\n\n"
                "O puedes solicitar hablar con un asesor humano."
            )
            
            # Volver a solicitar datos
            state.context_data["expedition_state"] = self.STATES["REQUESTING_CLIENT_DATA"]
        
        else:
            # Solicitar confirmaci√≥n m√°s clara
            response = (
                "Por favor confirma si deseas proceder con la expedici√≥n escribiendo 'S√≠, confirmo' "
                "o 'No, quiero hacer cambios'."
            )
        
        state = self.update_state(state, agent_response=response)
        state = self.add_message_to_history(state, "assistant", response)
        
        return state
    
    async def _execute_expedition(self, state: AgentState) -> AgentState:
        """Ejecuta la expedici√≥n de la p√≥liza"""
        try:
            self.logger.info("Ejecutando expedici√≥n de p√≥liza")
            
            state.context_data["expedition_state"] = self.STATES["PROCESSING_EXPEDITION"]
            
            # Preparar payload para expedici√≥n
            client_data = state.context_data.get("client_data")
            if not client_data:
                # RECUPERAR DATOS DEL CLIENTE DESDE BD
                self.logger.info("üîç Recuperando datos del cliente para ejecuci√≥n...")
                try:
                    agent_state = self.db_manager.get_agent_state(state.session_id, "expedition")
                    if agent_state and agent_state.get("client_data"):
                        client_data = agent_state["client_data"]
                        state.context_data["client_data"] = client_data
                        self.logger.info("‚úÖ Datos del cliente recuperados para ejecuci√≥n")
                    else:
                        self.logger.error("‚ùå No se encontraron datos del cliente en BD")
                        state.needs_human_intervention = True
                        state.escalation_reason = "Error t√©cnico: datos del cliente no disponibles"
                        return state
                except Exception as e:
                    self.logger.error(f"‚ùå Error recuperando datos del cliente: {e}")
                    state.needs_human_intervention = True
                    state.escalation_reason = "Error t√©cnico: datos del cliente no disponibles"
                    return state
            current_quotation = state.context_data.get("current_quotation", {})
            if not current_quotation:
                # RECUPERAR COTIZACI√ìN DE BD TAMBI√âN AQU√ç
                self.logger.info("üîç Recuperando cotizaci√≥n para ejecuci√≥n...")
                try:
                    with self.db_manager.get_connection() as conn:
                        row = conn.execute("""
                            SELECT vehicle_data, quotation_result 
                            FROM quotations 
                            WHERE session_id = ? 
                            ORDER BY created_at DESC 
                            LIMIT 1
                        """, (state.session_id,)).fetchone()
                        
                        if row:
                            import json
                            vehicle_data = json.loads(row['vehicle_data'])
                            quotation_result = json.loads(row['quotation_result'])
                            
                            current_quotation = {
                                "quotations": quotation_result.get("quotations", {}),
                                "vehicle_details": vehicle_data
                            }
                            state.context_data["current_quotation"] = current_quotation
                            self.logger.info("‚úÖ Cotizaci√≥n recuperada para ejecuci√≥n")
                        else:
                            self.logger.error("‚ùå No se encontr√≥ cotizaci√≥n en BD para ejecuci√≥n")
                            state.needs_human_intervention = True
                            state.escalation_reason = "Error t√©cnico: cotizaci√≥n no disponible"
                            return state
                except Exception as e:
                    self.logger.error(f"‚ùå Error recuperando cotizaci√≥n para ejecuci√≥n: {e}")
                    state.needs_human_intervention = True
                    state.escalation_reason = "Error t√©cnico: cotizaci√≥n no disponible"
                    return state
            
            vehicle_data = current_quotation.get("vehicle_details", current_quotation.get("vehicle_info", {}))
            quotation_data = current_quotation
            selected_plan = state.context_data.get("selected_plan")
            if not selected_plan:
                self.logger.error("‚ùå No hay plan seleccionado para ejecutar expedici√≥n")
                return await self._start_expedition_process(state)
            
            expedition_payload = self.expedition_service.prepare_expedition_payload(
                client_data=client_data,
                vehicle_data=vehicle_data,
                quotation_data=quotation_data,
                selected_plan=selected_plan
            )
            
            # Ejecutar expedici√≥n
            expedition_result = self.expedition_service.expedite_policy(expedition_payload)
            
            if expedition_result["success"]:
                # Expedici√≥n exitosa
                response = self._format_success_response(expedition_result, selected_plan)
                
                # Persistir p√≥liza en BD
                self.db_manager.save_policy(
                    policy_number=expedition_result["numero_poliza"],
                    session_id=state.session_id,
                    quotation_id=state.context_data.get("quotation_id"),
                    client_data=client_data,
                    policy_data=expedition_result
                )
                
                state.context_data["expedition_result"] = expedition_result
                state.context_data["expedition_state"] = self.STATES["EXPEDITION_COMPLETED"]
                
            else:
                # Error en expedici√≥n
                response = self._format_error_response(expedition_result)
                
                # Marcar para escalamiento
                state.needs_human_intervention = True
                state.escalation_reason = f"Error en expedici√≥n: {expedition_result.get('error', 'Error desconocido')}"
            
            # Guardar estado del agente
            self.save_agent_state(state, {
                "expedition_executed": True,
                "success": expedition_result["success"],
                "policy_number": expedition_result.get("numero_poliza"),
                "client_data": client_data,
                "selected_plan": selected_plan
            })
            
            self.log_interaction(
                state, expedition_payload, expedition_result,
                policy_number=expedition_result.get("numero_poliza"),
                success=expedition_result["success"]
            )
            
            state = self.update_state(state, agent_response=response["content"])
            state = self.add_message_to_history(
                state, "assistant", response["content"],
                metadata=response.get("metadata", {})
            )
            
            return state
            
        except Exception as e:
            self.logger.error(f"Error ejecutando expedici√≥n: {str(e)}")
            
            error_response = (
                "Lo siento, ocurri√≥ un error durante la expedici√≥n de tu p√≥liza. "
                "Te voy a conectar con un asesor humano para que pueda asistirte "
                "completando el proceso manualmente."
            )
            
            state = self.update_state(state, agent_response=error_response)
            state = self.add_message_to_history(state, "assistant", error_response)
            
            # Marcar para escalamiento
            state.needs_human_intervention = True
            state.escalation_reason = f"Error t√©cnico en expedici√≥n: {str(e)}"
            
            return state
    
    async def _handle_post_expedition(self, state: AgentState) -> AgentState:
        """Maneja interacciones despu√©s de expedici√≥n exitosa"""
        expedition_result = state.context_data.get("expedition_result", {})
        policy_number = expedition_result.get("numero_poliza")
        
        user_input_lower = state.last_user_input.lower()
        
        if any(word in user_input_lower for word in ["consultar", "estado", "informaci√≥n", "detalles"]):
            response = self._provide_policy_details(expedition_result, state.context_data)
        
        elif any(word in user_input_lower for word in ["problema", "error", "asesor", "ayuda"]):
            response = "Te conecto con un asesor humano para que pueda ayudarte con cualquier consulta sobre tu p√≥liza."
            state.needs_human_intervention = True
            state.escalation_reason = "Cliente solicita ayuda post-expedici√≥n"
        
        else:
            response = (
                f"Tu p√≥liza {policy_number} ha sido expedida exitosamente. "
                "¬øHay algo m√°s en lo que pueda ayudarte? Puedo:\n"
                "‚Ä¢ Darte detalles sobre tu p√≥liza\n"
                "‚Ä¢ Ayudarte con otra cotizaci√≥n\n" 
                "‚Ä¢ Conectarte con un asesor para consultas espec√≠ficas"
            )
        
        state = self.update_state(state, agent_response=response)
        state = self.add_message_to_history(state, "assistant", response)
        
        return state
    
    async def _no_quotation_available(self, state: AgentState) -> AgentState:
        """Maneja caso cuando no hay cotizaci√≥n disponible"""
        response = (
            "Para proceder con la expedici√≥n de una p√≥liza, primero necesito "
            "generar una cotizaci√≥n. ¬øTe gustar√≠a que te ayude a cotizar tu seguro de autos?"
        )
        
        # PRESERVAR estado de expedici√≥n - solo marcar transferencia
        state.context_data["expedition_state"] = self.STATES["NEEDS_QUOTATION"] 
        state.context_data["transfer_to"] = "quotation"
        state.context_data["previous_agent"] = "expedition"  # ANTI-BUCLE
        
        # Persistir estado para recuperaci√≥n posterior
        self.save_agent_state(state, {
            "expedition_state": self.STATES["NEEDS_QUOTATION"],
            "quotation_available": False
        })
        
        state = self.update_state(state, agent_response=response)
        state = self.add_message_to_history(state, "assistant", response)
        
        return state
    
    def _parse_client_data(self, user_input: str) -> Dict[str, str]:
        """
        PARSING INTELIGENTE CON LLM - Captura TODOS los datos de una vez
        """
        self.logger.info(f"üîç PARSING INTELIGENTE: '{user_input}'")
        
        # PASO 1: LLM PARSING COMPLETO (prioridad m√°xima)
        try:
            llm_data = self._extract_all_client_data_with_llm(user_input)
            if llm_data:
                self.logger.info(f"üß† LLM extrajo: {llm_data}")
                return llm_data
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è LLM parsing fall√≥: {e}")
        
        # PASO 2: REGEX MULTIPLES (respaldo)
        client_data = {}
        
        # EMAIL (m√°s espec√≠fico)
        email_match = re.search(r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})', user_input)
        if email_match:
            client_data["email_tomador"] = email_match.group(1)
            self.logger.info(f"‚úÖ Email: {email_match.group(1)}")
        
        # TEL√âFONO (10 d√≠gitos, empieza con 3)
        phone_matches = re.findall(r'\b(3\d{9})\b', user_input)
        if phone_matches:
            client_data["celular_tomador"] = phone_matches[0]
            self.logger.info(f"‚úÖ Tel√©fono: {phone_matches[0]}")
        
        # C√âDULA (6-11 d√≠gitos, NO empieza con 3)
        cedula_matches = re.findall(r'\b(\d{6,11})\b', user_input)
        for cedula in cedula_matches:
            if not cedula.startswith('3'):  # No es tel√©fono
                client_data["identificacion_tomador"] = cedula
                self.logger.info(f"‚úÖ C√©dula: {cedula}")
                break
        
        # NOMBRE (letras y espacios, m√≠nimo 2 palabras)
        name_match = re.search(r'\b([A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+(?:\s+[A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+)+)\b', user_input)
        if name_match:
            client_data["nombre_tomador"] = name_match.group(1).strip()
            self.logger.info(f"‚úÖ Nombre: {name_match.group(1)}")
        
        return client_data
    
    def _extract_all_client_data_with_llm(self, user_input: str) -> Dict[str, str]:
        """
        EXTRACCI√ìN COMPLETA CON LLM - Sin bucles infinitos
        """
        try:
            from openai import AzureOpenAI
            
            client = AzureOpenAI(
                api_key=config.azure_openai.api_key,
                api_version=config.azure_openai.api_version,
                azure_endpoint=config.azure_openai.endpoint
            )
            
            system_prompt = """Eres un experto extractor de datos personales.
EXTRAE TODOS los datos que puedas identificar del texto del usuario.

CAMPOS A BUSCAR:
- nombre_tomador: Nombre completo (ej: "Juan Ramirez", "Mar√≠a Gonz√°lez")
- identificacion_tomador: C√©dula (6-11 d√≠gitos, NO tel√©fono)
- celular_tomador: Tel√©fono celular (10 d√≠gitos, empieza con 3)
- email_tomador: Correo electr√≥nico

IMPORTANTE:
- Extrae TODOS los datos que encuentres
- NO inventes datos que no est√°n
- Diferencia entre c√©dula (ej: 123456789) y tel√©fono (ej: 3001234567)
- El nombre debe tener al menos 2 palabras

Responde SOLO en formato JSON:
{"nombre_tomador": "...", "identificacion_tomador": "...", "celular_tomador": "...", "email_tomador": "..."}

Si no encuentras alg√∫n campo, om√≠telo del JSON."""

            response = client.chat.completions.create(
                model=config.azure_openai.chat_deployment,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_input}
                ],
                temperature=0.1,
                max_tokens=200
            )
            
            result_text = response.choices[0].message.content.strip()
            self.logger.info(f"üß† LLM response: {result_text}")
            
            # Parse JSON response
            import json
            result = json.loads(result_text)
            
            # Validar que los datos tienen sentido
            validated_result = {}
            
            if "nombre_tomador" in result and len(result["nombre_tomador"].split()) >= 2:
                validated_result["nombre_tomador"] = result["nombre_tomador"]
                
            if "identificacion_tomador" in result and result["identificacion_tomador"].isdigit():
                cedula = result["identificacion_tomador"]
                if 6 <= len(cedula) <= 11 and not cedula.startswith('3'):
                    validated_result["identificacion_tomador"] = cedula
                    
            if "celular_tomador" in result and result["celular_tomador"].isdigit():
                phone = result["celular_tomador"]
                if len(phone) == 10 and phone.startswith('3'):
                    validated_result["celular_tomador"] = phone
                    
            if "email_tomador" in result and "@" in result["email_tomador"]:
                validated_result["email_tomador"] = result["email_tomador"]
            
            return validated_result
            
        except Exception as e:
            self.logger.error(f"‚ùå LLM extraction error: {e}")
            return {}
        
        # Buscar datos estructurados (formato "Campo: Valor")
        lines = user_input.split('\n')
        for line in lines:
            line = line.strip()
            if ':' in line:
                key, value = line.split(':', 1)
                key = key.strip().lower()
                value = value.strip()
                
                if 'cedula' in key or 'identificacion' in key:
                    client_data["identificacion_tomador"] = value
                elif 'telefono' in key or 'celular' in key:
                    client_data["celular_tomador"] = re.sub(r'[-\s]', '', value)
                elif 'email' in key or 'correo' in key:
                    client_data["email_tomador"] = value
        
        return client_data
    
    def _parse_plan_selection(self, user_input: str, quotation: Dict) -> Optional[str]:
        """Parsea selecci√≥n de plan desde entrada del usuario"""
        if not quotation or "quotations" not in quotation:
            return None
        
        available_plans = list(quotation["quotations"].keys())
        user_input_lower = user_input.lower().strip()
        
        # MANEJAR SELECCIONES NUM√âRICAS (1, 2, 3) - tambi√©n buscar en texto mixto
        if user_input_lower.isdigit():
            plan_index = int(user_input_lower) - 1  # Convertir a √≠ndice (1->0, 2->1, 3->2)
            if 0 <= plan_index < len(available_plans):
                selected_plan = available_plans[plan_index]
                self.logger.info(f"‚úÖ Plan seleccionado por n√∫mero: {user_input_lower} ‚Üí {selected_plan}")
                return selected_plan
        
        # Buscar n√∫meros al inicio del texto (ej: "1 Me gusta...")
        import re
        number_match = re.match(r'^(\d+)', user_input_lower.strip())
        if number_match:
            plan_number = int(number_match.group(1))
            plan_index = plan_number - 1
            if 0 <= plan_index < len(available_plans):
                selected_plan = available_plans[plan_index]
                self.logger.info(f"‚úÖ Plan seleccionado por n√∫mero al inicio: {plan_number} ‚Üí {selected_plan}")
                return selected_plan
        
        # Buscar coincidencias directas
        for plan in available_plans:
            if plan.lower() in user_input_lower:
                return plan
        
        # Buscar por palabras clave
        if "basico" in user_input_lower:
            basic_plans = [p for p in available_plans if "basico" in p.lower()]
            if basic_plans:
                return basic_plans[0]
        
        if "clasico" in user_input_lower:
            classic_plans = [p for p in available_plans if "clasico" in p.lower()]
            if classic_plans:
                return classic_plans[0]
        
        if "global" in user_input_lower:
            global_plans = [p for p in available_plans if "global" in p.lower()]
            if global_plans:
                return global_plans[0]
        
        return None
    
    def _request_plan_selection(self, quotation: Dict) -> Dict[str, Any]:
        """Solicita selecci√≥n de plan"""
        plans = quotation["quotations"]
        
        response_parts = [
            "Perfecto! Para proceder con la expedici√≥n, necesito que selecciones el plan que te interesa:",
            ""
        ]
        
        for i, (plan_name, plan_data) in enumerate(plans.items(), 1):
            prima_mensual = f"${plan_data['prima_mensual']:,.0f}"
            response_parts.append(f"{i}. **{plan_name}** - Prima mensual: {prima_mensual}")
        
        response_parts.extend([
            "",
            "Por favor escribe el nombre del plan que quieres contratar."
        ])
        
        return self.format_response(
            content="\n".join(response_parts),
            response_type="plan_selection"
        )
    
    def _request_client_data(self, selected_plan: str, quotation: Dict) -> Dict[str, Any]:
        """Solicita datos del cliente"""
        plan_data = quotation["quotations"][selected_plan]
        prima_mensual = f"${plan_data['prima_mensual']:,.0f}"
        
        response = (
            f"Excelente elecci√≥n! Has seleccionado el **{selected_plan}** "
            f"con prima mensual de {prima_mensual}.\n\n"
            f"Para proceder con la expedici√≥n de tu p√≥liza, necesito los siguientes datos:\n\n"
            f"‚Ä¢ **N√∫mero de c√©dula**\n"
            f"‚Ä¢ **N√∫mero de celular** (10 d√≠gitos)\n"
            f"‚Ä¢ **Correo electr√≥nico**\n\n"
            f"Puedes enviarlos en el formato que prefieras, por ejemplo:\n"
            f"'C√©dula: 12345678, Celular: 3001234567, Email: ejemplo@correo.com'"
        )
        
        return self.format_response(
            content=response,
            response_type="client_data_request",
            metadata={"selected_plan": selected_plan}
        )
    
    def _request_data_correction(self, validation_errors: Dict, current_data: Dict) -> Dict[str, Any]:
        """Solicita correcci√≥n de datos inv√°lidos"""
        response_parts = [
            "He encontrado algunos problemas con los datos proporcionados:",
            ""
        ]
        
        for field, error in validation_errors.items():
            response_parts.append(f"‚Ä¢ {error}")
        
        if current_data:
            response_parts.extend([
                "",
                "Datos que est√°n correctos:"
            ])
            
            field_names = {
                "identificacion_tomador": "C√©dula",
                "celular_tomador": "Celular", 
                "email_tomador": "Email"
            }
            
            for field, value in current_data.items():
                if field not in validation_errors:
                    field_name = field_names.get(field, field)
                    response_parts.append(f"‚Ä¢ {field_name}: {value}")
        
        response_parts.extend([
            "",
            "Por favor corrige la informaci√≥n y env√≠ala nuevamente."
        ])
        
        return self.format_response(
            content="\n".join(response_parts),
            response_type="data_correction_request"
        )
    
    def _request_purchase_confirmation(self, client_data: Dict, context_data: Dict) -> Dict[str, Any]:
        """Solicita confirmaci√≥n de compra"""
        selected_plan = context_data.get("selected_plan")
        if not selected_plan:
            raise ValueError("No hay plan seleccionado")
            
        quotation = context_data.get("current_quotation", {})
        if not quotation:
            raise ValueError("No hay cotizaci√≥n disponible")
            
        plan_data = quotation.get("quotations", {}).get(selected_plan, {})
        vehicle_info = quotation.get("vehicle_details", quotation.get("vehicle_info", {}))
        
        response_parts = [
            "**Resumen de tu p√≥liza:**",
            "",
            f"**Veh√≠culo:** {vehicle_info['marca']} {vehicle_info['modelo']} {vehicle_info['linea']}",
            f"**Plan:** {selected_plan}",
            f"**Prima anual:** ${plan_data['prima_anual']:,.0f}",
            f"**Prima mensual:** ${plan_data['prima_mensual']:,.0f}",
            "",
            "**Datos del tomador:**",
            f"‚Ä¢ C√©dula: {client_data['identificacion_tomador']}",
            f"‚Ä¢ Celular: {client_data['celular_tomador']}",
            f"‚Ä¢ Email: {client_data['email_tomador']}",
            "",
            "**¬øConfirmas que toda la informaci√≥n est√° correcta y deseas proceder con la expedici√≥n?**",
            "",
            "Responde 'S√≠, confirmo' para proceder o 'No, quiero hacer cambios' para modificar."
        ]
        
        return self.format_response(
            content="\n".join(response_parts),
            response_type="purchase_confirmation"
        )
    
    def _format_success_response(self, expedition_result: Dict, selected_plan: str) -> Dict[str, Any]:
        """Formatea respuesta de expedici√≥n exitosa"""
        policy_number = expedition_result["numero_poliza"]
        
        response = (
            f"üéâ **¬°Felicitaciones! Tu p√≥liza ha sido expedida exitosamente.**\n\n"
            f"**N√∫mero de p√≥liza:** {policy_number}\n"
            f"**Plan contratado:** {selected_plan}\n"
            f"**Fecha de emisi√≥n:** {expedition_result.get('fecha_expedicion', 'Hoy')}\n\n"
            f"**Pr√≥ximos pasos:**\n"
            f"‚Ä¢ Recibir√°s un correo con los detalles de tu p√≥liza\n"
            f"‚Ä¢ Un asesor se comunicar√° contigo para el seguimiento\n"
            f"‚Ä¢ Puedes descargar la App Seguros SURA para gestionar tu p√≥liza\n\n"
            f"¬°Gracias por confiar en Seguros SURA! ¬øHay algo m√°s en lo que pueda ayudarte?"
        )
        
        return self.format_response(
            content=response,
            response_type="expedition_success",
            metadata={
                "policy_number": policy_number,
                "expedition_result": expedition_result
            }
        )
    
    def _format_error_response(self, expedition_result: Dict) -> Dict[str, Any]:
        """Formatea respuesta de error en expedici√≥n"""
        error_msg = expedition_result.get("error", "Error desconocido")
        
        response = (
            f"Lo siento, ocurri√≥ un problema durante la expedici√≥n de tu p√≥liza:\n\n"
            f"**Error:** {error_msg}\n\n"
            f"No te preocupes, te voy a conectar con un asesor humano que podr√° "
            f"completar el proceso manualmente y resolver cualquier inconveniente."
        )
        
        return self.format_response(
            content=response,
            response_type="expedition_error",
            metadata={"error_details": expedition_result}
        )
    
    def _provide_policy_details(self, expedition_result: Dict, context_data: Dict) -> str:
        """Proporciona detalles de la p√≥liza expedida"""
        policy_number = expedition_result.get("numero_poliza")
        selected_plan = context_data.get("selected_plan")
        quotation = context_data.get("current_quotation", {})
        
        if quotation and selected_plan:
            plan_data = quotation["quotations"][selected_plan]
            vehicle_info = quotation["vehicle_info"]
            
            return (
                f"**Detalles de tu p√≥liza {policy_number}:**\n\n"
                f"**Veh√≠culo asegurado:**\n"
                f"‚Ä¢ {vehicle_info['marca']} {vehicle_info['modelo']}\n"
                f"‚Ä¢ L√≠nea: {vehicle_info['linea']}\n"
                f"‚Ä¢ Color: {vehicle_info['color']}\n\n"
                f"**Plan contratado:** {selected_plan}\n"
                f"**Prima mensual:** ${plan_data['prima_mensual']:,.0f}\n"
                f"**Prima anual:** ${plan_data['prima_anual']:,.0f}\n\n"
                f"Para m√°s detalles sobre coberturas y condiciones, "
                f"consulta tu correo o contacta a tu asesor asignado."
            )
        else:
            return f"Tu p√≥liza {policy_number} ha sido expedida. Para consultar detalles espec√≠ficos, te recomiendo contactar a tu asesor."
    
    def get_expedition_summary(self, state: AgentState) -> Dict[str, Any]:
        """Genera resumen del proceso de expedici√≥n"""
        agent_state = self.load_agent_state(state.session_id) or {}
        
        return {
            "expedition_executed": agent_state.get("expedition_executed", False),
            "success": agent_state.get("success", False),
            "policy_number": agent_state.get("policy_number"),
            "selected_plan": agent_state.get("selected_plan"),
            "expedition_state": state.context_data.get("expedition_state")
        }
    
    def _request_missing_data(self, missing_fields: list, current_data: Dict) -> Dict[str, Any]:
        """Solicita datos faltantes espec√≠ficos al cliente"""
        field_names = {
            "identificacion_tomador": "n√∫mero de c√©dula",
            "celular_tomador": "n√∫mero de tel√©fono",
            "email_tomador": "correo electr√≥nico"
        }
        
        # Mostrar datos ya recibidos
        response_parts = []
        if current_data:
            response_parts.append("üìù **Informaci√≥n recibida:**")
            for key, value in current_data.items():
                if key == "nombre_tomador":
                    response_parts.append(f"‚Ä¢ **Nombre:** {value}")
                elif key == "identificacion_tomador":
                    response_parts.append(f"‚Ä¢ **C√©dula:** {value}")
            response_parts.append("")
        
        # Solicitar siguiente dato
        next_field = missing_fields[0]
        field_description = field_names.get(next_field, next_field)
        
        response_parts.extend([
            f"Para continuar, necesito tu **{field_description}**.",
            "",
            "üì± Por favor env√≠amelo en tu pr√≥ximo mensaje."
        ])
        
        return {
            "content": "\n".join(response_parts),
            "metadata": {"request_type": "missing_data", "missing_field": next_field}
        }
    
    def _extract_client_data_with_llm(self, user_input: str) -> Dict[str, str]:
        """Extrae datos del cliente usando LLM para entender lenguaje natural"""
        try:
            system_prompt = """Eres un experto en extraer informaci√≥n personal de mensajes.
Extrae √öNICAMENTE los datos que puedas identificar con certeza absoluta.

CAMPOS A BUSCAR:
- nombre_tomador: Nombre completo de la persona (ej: Juan P√©rez, Mar√≠a Gonz√°lez)
- identificacion_tomador: N√∫mero de c√©dula/documento (solo n√∫meros, 6-12 d√≠gitos)
- celular_tomador: N√∫mero de tel√©fono (10 d√≠gitos, puede tener espacios/guiones)
- email_tomador: Correo electr√≥nico v√°lido

IMPORTANTE: 
- Solo incluye campos que est√©s 100% seguro
- Para tel√©fonos, extrae solo los n√∫meros (sin espacios/guiones)
- Para nombres, incluye nombre completo
- Si no est√°s seguro de un campo, NO lo incluyas

Responde en formato JSON estricto:
{"nombre_tomador": "...", "identificacion_tomador": "...", "celular_tomador": "...", "email_tomador": "..."}"""

            user_prompt = f"Extrae informaci√≥n personal de: '{user_input}'"
            
            from utils.config import config
            response = self.llm_client.chat.completions.create(
                model=config.azure_openai_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.1,
                max_tokens=200
            )
            
            import json
            result = json.loads(response.choices[0].message.content)
            
            # Filtrar campos vac√≠os
            filtered_result = {}
            for key, value in result.items():
                if value and str(value).strip() and str(value).lower() not in ["", "n/a", "null", "none"]:
                    filtered_result[key] = str(value).strip()
            
            self.logger.info(f"‚úÖ LLM extrajo datos: {filtered_result} de '{user_input}'")
            return filtered_result
            
        except Exception as e:
            self.logger.warning(f"LLM extraction fall√≥: {e}")
            return {}
    
    def _request_comprehensive_data(self, missing_fields: list, current_data: Dict) -> Dict[str, Any]:
        """SOLICITA TODOS LOS DATOS FALTANTES - SIN BUCLES"""
        field_names = {
            "identificacion_tomador": "n√∫mero de c√©dula",
            "celular_tomador": "n√∫mero de tel√©fono celular", 
            "email_tomador": "correo electr√≥nico"
        }
        
        # Mostrar progreso de datos confirmados
        completed_fields = []
        for field_key, field_display in field_names.items():
            if field_key in current_data and current_data[field_key]:
                completed_fields.append(f"‚úÖ {field_display.title()}: {current_data[field_key]}")
        
        # Datos faltantes
        missing_names = [field_names.get(field, field) for field in missing_fields]
        
        progress_text = ""
        if completed_fields:
            progress_text = f"üìù **Datos confirmados:**\n" + "\n".join(completed_fields) + "\n\n"
        
        if len(missing_fields) == 1:
            message = f"{progress_text}Para completar tu expedici√≥n, necesito tu **{missing_names[0]}**.\n\nüì± Env√≠amelo en tu pr√≥ximo mensaje."
        else:
            missing_list = "\n".join([f"‚Ä¢ {name}" for name in missing_names])
            message = f"{progress_text}üöÄ **Para completar tu expedici√≥n, necesito:**\n\n{missing_list}\n\nüì± **Puedes enviarme todo junto en un solo mensaje.**"
        
        return {
            "content": message,
            "metadata": {"requesting_fields": missing_fields}
        }
