"""
Script de setup autom√°tico para el Sistema de Agentes Seguros Sura.
Configura el entorno, instala dependencias y prepara datos iniciales.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def print_banner():
    """Imprime banner del sistema"""
    print("=" * 60)
    print("üè¢ SISTEMA DE AGENTES SEGUROS SURA - SETUP")
    print("Sistema Multiag√©ntico para Asesor√≠a y Venta de P√≥lizas")
    print("=" * 60)

def check_python_version():
    """Verifica versi√≥n de Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def setup_virtual_environment():
    """Configura entorno virtual si no existe"""
    venv_path = Path("venv")
    
    if venv_path.exists():
        print("‚úÖ Entorno virtual ya existe")
        return True
    
    print("üîß Creando entorno virtual...")
    try:
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("‚úÖ Entorno virtual creado")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error creando entorno virtual: {e}")
        return False

def install_dependencies():
    """Instala dependencias del requirements (solo si es necesario)"""
    requirements_file = Path("requirements/local.txt")
    
    if not requirements_file.exists():
        print("‚ùå Error: archivo requirements/local.txt no encontrado")
        return False
    
    # Verificar si las dependencias ya est√°n instaladas
    print("üîç Verificando dependencias existentes...")
    
    # Determinar comando pip
    if os.name == 'nt':  # Windows
        pip_cmd = ["venv\\Scripts\\pip"]
    else:  # Unix/Linux/Mac
        pip_cmd = ["venv/bin/pip"]
    
    # Verificar paquetes cr√≠ticos usando python directo del venv
    if os.name == 'nt':  # Windows
        python_cmd = ["venv\\Scripts\\python"]
    else:  # Unix/Linux/Mac
        python_cmd = ["venv/bin/python"]
    
    critical_packages = ["langchain", "openai", "streamlit", "chromadb"]
    missing_packages = []
    
    for package in critical_packages:
        try:
            # Usar python -c "import package" para verificar
            result = subprocess.run(
                python_cmd + ["-c", f"import {package}; print('OK')"], 
                capture_output=True, 
                text=True, 
                check=False
            )
            if result.returncode != 0:
                missing_packages.append(package)
        except:
            missing_packages.append(package)
    
    if not missing_packages:
        print("‚úÖ Dependencias ya est√°n instaladas y funcionando")
        return True
    
    print(f"üì¶ Faltan dependencias: {', '.join(missing_packages)}")
    print("üì¶ Instalando dependencias faltantes...")
    
    try:
        # Solo instalar si faltan dependencias
        subprocess.run(pip_cmd + ["install", "-r", str(requirements_file)], check=True)
        
        print("‚úÖ Dependencias instaladas")
        return True
    except (subprocess.CalledProcessError, PermissionError, OSError) as e:
        print(f"‚ö†Ô∏è  Error instalando dependencias: {e}")
        print("üí° Verificando si las dependencias est√°n disponibles de otra manera...")
        
        # En caso de error, verificar si las dependencias cr√≠ticas est√°n disponibles
        still_missing = []
        available = []
        
        for package in critical_packages:
            try:
                result = subprocess.run(
                    python_cmd + ["-c", f"import {package}; print('OK')"], 
                    capture_output=True, 
                    text=True, 
                    check=False
                )
                if result.returncode == 0:
                    available.append(package)
                else:
                    still_missing.append(package)
            except:
                still_missing.append(package)
        
        print(f"‚úÖ Disponibles: {', '.join(available) if available else 'ninguno'}")
        print(f"‚ùå Faltantes: {', '.join(still_missing) if still_missing else 'ninguno'}")
        
        if not still_missing:
            print("‚úÖ Todas las dependencias cr√≠ticas est√°n disponibles")
            return True
        elif len(available) >= 2:  # Al menos la mitad est√°n disponibles
            print(f"‚ö†Ô∏è  Faltan algunas dependencias, pero {len(available)} est√°n disponibles")
            print("üí° El setup continuar√°. Instala manualmente si hay problemas:")
            print(f"üí°   pip install {' '.join(still_missing)}")
            return True
        else:
            print(f"‚ùå Faltan demasiadas dependencias cr√≠ticas: {', '.join(still_missing)}")
            print("üí° Instala manualmente: pip install -r requirements/local.txt")
            return False

def setup_directories():
    """Crea directorios necesarios"""
    print("üìÅ Configurando directorios...")
    
    directories = [
        "data/sessions",
        "data/vectors", 
        "data/vehicles",
        "data/documents",
        "data/images",
        "logs",
        "services/expedition_api/polizas"
    ]
    
    try:
        for dir_path in directories:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
        
        print("‚úÖ Directorios configurados")
        return True
    except Exception as e:
        print(f"‚ùå Error configurando directorios: {e}")
        return False

def setup_environment_file():
    """Configura archivo de entorno"""
    env_file = Path(".env")
    env_example = Path("env.example")
    
    if env_file.exists():
        print("‚úÖ Archivo .env ya existe")
        return True
    
    if env_example.exists():
        print("üìù Creando archivo .env desde ejemplo...")
        shutil.copy(env_example, env_file)
        print("‚úÖ Archivo .env creado")
        print("‚ö†Ô∏è  IMPORTANTE: Edita .env y agrega tu OPENAI_API_KEY")
        return True
    else:
        print("üìù Creando archivo .env b√°sico...")
        with open(env_file, 'w') as f:
            f.write("""# Configuraci√≥n Sistema Agentes Seguros Sura
AZURE_OPENAI_API_KEY=tu-api-key-aqui
ENVIRONMENT=local
DEBUG=True
CLIENT_PORT=8501
ADVISOR_PORT=8502
EXPEDITION_API_URL=http://localhost:8000
""")
        print("‚úÖ Archivo .env creado")
        print("‚ö†Ô∏è  IMPORTANTE: Edita .env y agrega tu OPENAI_API_KEY")
        return True

def copy_original_data():
    """Copia datos originales si est√°n disponibles"""
    print("üìä Verificando datos originales...")
    
    # Verificar si existen datos originales
    original_base = Path("../prueba_tecnica")
    
    if not original_base.exists():
        print("‚ö†Ô∏è  Datos originales no encontrados en ../prueba_tecnica")
        print("   Aseg√∫rate de que los insumos est√©n disponibles")
        return False
    
    # Copiar archivos si no existen
    copies_needed = []
    
    # Verificar Excel de veh√≠culos
    vehicles_excel = Path("data/vehicles/carros.xlsx")
    if not vehicles_excel.exists():
        original_excel = original_base / "3. Cotizacion" / "funcion_cotizacion" / "data" / "carros.xlsx"
        if original_excel.exists():
            copies_needed.append((original_excel, vehicles_excel))
    
    # Verificar documentos PDF
    docs_dir = Path("data/documents")
    if not any(docs_dir.glob("*.pdf")):
        original_docs = original_base / "1. Documentos planes autos"
        if original_docs.exists():
            for pdf_file in original_docs.glob("*.pdf"):
                copies_needed.append((pdf_file, docs_dir / pdf_file.name))
    
    # Realizar copias
    if copies_needed:
        print(f"üìã Copiando {len(copies_needed)} archivos de datos...")
        for src, dst in copies_needed:
            try:
                shutil.copy2(src, dst)
                print(f"   ‚úÖ {dst.name}")
            except Exception as e:
                print(f"   ‚ùå Error copiando {dst.name}: {e}")
    else:
        print("‚úÖ Datos ya est√°n disponibles")
    
    return True

def verify_installation():
    """Verifica que la instalaci√≥n sea correcta"""
    print("üîç Verificando instalaci√≥n...")
    
    # Verificar dependencias cr√≠ticas
    critical_packages = [
        "langchain", "openai", "streamlit", "chromadb", 
        "pandas", "sqlalchemy", "pydantic"
    ]
    
    print("üì¶ Verificando dependencias cr√≠ticas...")
    try:
        import subprocess
        
        # Determinar comando pip
        if os.name == 'nt':  # Windows
            pip_cmd = ["venv\\Scripts\\pip"]
        else:  # Unix/Linux/Mac
            pip_cmd = ["venv/bin/pip"]
        
        # Usar python directo del venv para verificar
        if os.name == 'nt':  # Windows
            python_cmd = ["venv\\Scripts\\python"]
        else:  # Unix/Linux/Mac
            python_cmd = ["venv/bin/python"]
        
        # Verificar cada paquete cr√≠tico
        for package in critical_packages:
            try:
                result = subprocess.run(
                    python_cmd + ["-c", f"import {package}; print('OK')"], 
                    capture_output=True, 
                    text=True, 
                    check=False
                )
                if result.returncode == 0:
                    print(f"   ‚úÖ {package}")
                else:
                    print(f"   ‚ö†Ô∏è  {package} - No disponible en venv")
            except Exception as e:
                print(f"   ‚ùå Error verificando {package}: {e}")
                return False
        
        print("üì¶ Verificaci√≥n de dependencias en venv completada")
        
    except Exception as e:
        print(f"‚ùå Error verificando dependencias: {e}")
        return False
    
    # Verificar si el proyecto funciona independientemente del venv
    try:
        sys.path.insert(0, str(Path.cwd()))
        
        print("üß™ Probando imports del proyecto...")
        
        # Probar imports del proyecto directamente
        from utils.config import config
        print("‚úÖ Configuraci√≥n del proyecto - OK")
        
        # Probar agentes principales
        from agents.orchestrator import AgentOrchestrator
        print("‚úÖ Orquestador - OK")
        
        from agents.quotation_agent import QuotationAgent
        print("‚úÖ Agente de cotizaci√≥n - OK")
        
        # Verificar API Key
        if not hasattr(config, 'azure_openai') or not config.azure_openai.api_key or config.azure_openai.api_key.startswith("tu-api-key"):
            print("‚ö†Ô∏è  Advertencia: AZURE_OPENAI_API_KEY no configurada correctamente")
            print("   Edita el archivo .env y agrega tu API key antes de usar el sistema")
        else:
            print("‚úÖ Configuraci√≥n API - OK")
        
        print("‚úÖ El proyecto est√° listo para funcionar!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n del proyecto: {e}")
        print("üí° Algunos imports fallan, pero esto puede ser normal en setup inicial")
        
        # Verificaci√≥n m√≠nima - solo que el directorio est√© bien estructurado
        required_files = [
            "utils/config.py",
            "agents/orchestrator.py", 
            "agents/quotation_agent.py",
            "interfaces/client_interface.py",
            "run_client.py"
        ]
        
        missing_files = []
        for file_path in required_files:
            if not Path(file_path).exists():
                missing_files.append(file_path)
        
        if missing_files:
            print(f"‚ùå Archivos cr√≠ticos faltantes: {', '.join(missing_files)}")
            return False
        else:
            print("‚úÖ Estructura del proyecto - OK")
            print("üí° El proyecto deber√≠a funcionar. Si hay problemas, instala dependencias manualmente.")
            return True

def print_next_steps():
    """Imprime pr√≥ximos pasos"""
    print("\n" + "=" * 60)
    print("üéâ SETUP COMPLETADO")
    print("=" * 60)
    
    print("\nüìã PR√ìXIMOS PASOS:")
    print("\n1. Configurar API Key:")
    print("   - Edita el archivo .env")
    print("   - Agrega tu OPENAI_API_KEY v√°lida")
    
    print("\n2. Iniciar el sistema:")
    print("   - Cliente: python run_client.py")
    print("   - Asesor:  python run_advisor.py")
    print("   - Ambos:   docker-compose up")
    
    print("\n3. Acceder a las interfaces:")
    print("   - Cliente: http://localhost:8501")
    print("   - Asesor:  http://localhost:8502")
    
    print("\n4. Documentaci√≥n:")
    print("   - Revisa docs/DEPLOYMENT.md para detalles")
    print("   - Revisa docs/USE_CASES.md para ejemplos")
    
    print("\nüí° CONSEJOS:")
    print("   - Usa 'admin123' como contrase√±a en interfaz asesor")
    print("   - Prueba subiendo im√°genes de veh√≠culos en interfaz cliente")
    print("   - Revisa logs/ para debugging si hay problemas")
    
    print("\n" + "=" * 60)

def main():
    """Funci√≥n principal de setup"""
    print_banner()
    
    # Verificaciones previas
    if not check_python_version():
        sys.exit(1)
    
    # Setup paso a paso
    steps = [
        ("Entorno virtual", setup_virtual_environment),
        ("Dependencias", install_dependencies),
        ("Directorios", setup_directories),
        ("Archivo entorno", setup_environment_file),
        ("Datos originales", copy_original_data),
        ("Verificaci√≥n", verify_installation)
    ]
    
    print(f"\nüöÄ Ejecutando {len(steps)} pasos de configuraci√≥n...\n")
    
    for step_name, step_func in steps:
        print(f"üìç {step_name}...")
        if not step_func():
            print(f"‚ùå Error en paso: {step_name}")
            print("üõë Setup interrumpido")
            sys.exit(1)
        print()
    
    print_next_steps()

if __name__ == "__main__":
    main()
